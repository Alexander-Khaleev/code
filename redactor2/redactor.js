// Identificationvar summa = 0;var markerSumma = 0;var dragAndDropCenter = 0;var blockPosition = 0;// Mask for pop-upvar Mask = React.createClass({    componentDidMount:function() {        $('#basket-mask').css('height', $(window).height());    },    render: function() {        return (            <div id="basket-mask"> </div>        );    }});// Paragraphvar Block = React.createClass({    getInitialState: function() {        return {            position: summa        };    },    componentDidMount:function() {        $(".textarea").jqte({fsize: false, color: false, outdent: false, left: false, center:false, indent: false, right:false, source:false, format: false, ol: false, ul: false});    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {        var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "There was api" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');		/*$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Paragraph');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});*/			    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    getOut: function() {        var blockText = ReactDOM.findDOMNode(this.refs.blocktext);        var jqte = $(blockText).find('.jqte_editor');        var jqteHtml = $(jqte).html();        if (jqteHtml !== " ") {            var responseText = '<p>' + jqteHtml + '</p>';			var thisBlockId = $('#grid-block' + this.props.count).attr('class');			var thisUrl = "There was api" + thisBlockId  + "/delete_element/";			var formData = {'text': responseText};			var newForm = JSON.stringify(formData);			/*$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update data paragraph');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}			});	*/						        }    },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div>            <div className="block-text" ref="blocktext" onBlur={this.getOut}>                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" ref="action" className="action" onChange={this.basket} />  </div>                    <div className="up-title"> Параграф </div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i></div>                </div>                    <div className="none-float"></div>                <div ref="par" className="textarea"> </div>            <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>            <br />            <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;            <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>            </div>            </div>            </div>                </div>            <div className="probel"> </div>            </div>        );    }});// Block "Paragraph + image"var BlockPimage = React.createClass({    getInitialState: function() {        return {            position: summa,			floats: "right"        };    },	  componentDidMount:function() {        $(".textarea").jqte({fsize: false, color: false, outdent: false, left: false, center:false, indent: false, right:false, source:false, format: false, ol: false, ul: false});		 $(ReactDOM.findDOMNode(this.refs.blockpimage)).css('text-align','right');    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {		var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "There was api" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');		/*$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Paragraph + image');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});*/			    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },	changeFloatLeft: function() {		this.setState({floats: 'left'});		 $(ReactDOM.findDOMNode(this.refs.blockpimage)).css('text-align','left');			},	changeFloatRight: function() {		this.setState({floats: 'right'});		$(ReactDOM.findDOMNode(this.refs.blockpimage)).css('text-align','right');	},    getOut: function() {		var blockText = ReactDOM.findDOMNode(this.refs.blocktext);        var jqte = $(blockText).find('.jqte_editor');        var jqteHtml = $(jqte).html();				var inputImgVal = ReactDOM.findDOMNode(this.refs.file).value;		if (inputImgVal !== '' && jqteHtml !== " ") {			var responseText = '<p>' + jqteHtml + '</p>';			var inputImgValNew = inputImgVal.substr(12);			var thisBlockId = $('#grid-block' + this.props.count).attr('class');			var thisUrl = "There was api" + thisBlockId  + "/delete_element/";			if (this.state.floats == 'right') {				var imgUrl = "<img style='float:left;' src='" + inputImgValNew + "' />";				var pimage = responseText  + imgUrl;								var formData = {'text': inputImgValNew, 'is_left': "true", 'alt':'', 'copyright_id':1};				var newForm = JSON.stringify(formData);				/*$.ajax({					url : thisUrl,					type: "POST",					contentType: 'application/json',					data : newForm,					success: function(data, textStatus, jqXHR)					{						console.log('Update data paragraph + image');					},					error: function (jqXHR, textStatus, errorThrown)					{						console.log(errorThrown);					}				});*/				}			if (this.state.floats == 'left') {				var imgUrl = "<img style='float:left;' src='" + inputImgValNew + "' />";				var pimage = imgUrl + responseText;				var formData = {'text': inputImgValNew, 'is_left': "false", 'alt':'', 'copyright_id':1};				var newForm = JSON.stringify(formData);				$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update data paragraph + image');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}				});				}		}					    },	change: function(e) {				  var inputImgVal = e.target.value;	  var inputImgValNew = inputImgVal.substr(12);	  var inputFile = ReactDOM.findDOMNode(this.refs.file);      var file = new FormData();	  file.append( 'img', $(inputFile)[0].files[0]);	  var refFile = ReactDOM.findDOMNode(this.refs.upmain);	  var refImage = ReactDOM.findDOMNode(this.refs.blockpimage);	  var thisBlockId = $('#grid-block' + this.props.count).attr('class');	  var thisUrl2 = "There was api" + thisBlockId  + "/delete_element/";	  /*$.ajax({            url: thisUrl2,            data: file,            processData: false,            contentType: false,            type: 'POST',            success: function (data, textStatus, jqXHR) {                $(refFile).css('display','none');				var imgValNew = data.img;				var blockImage = "<img class='img-block' src='" + imgValNew + "' />";				$(refImage).append(blockImage);            }      });*/	},    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div>            <div className="block-pimage" ref="blocktext" onBlur={this.getOut}>                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" ref="action" className="action" onChange={this.basket} />  </div>                    <div className="up-title"> Параграф + изображение </div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                </div>                    <div className="none-float"></div>                <div ref="par" className="textarea"> </div>				<div className="razdelitel"></div>					<div ref="blockpimage">					 <div className="pimage-buttons">							<button className="btn btn-default" onClick={this.changeFloatLeft}> Слева </button>						<button className="btn btn-default" onClick={this.changeFloatRight}> Справа </button>					 </div>					  <div className="none-float"></div>				     <div className="file-upload-pimage" ref="upmain">					  <div className="none-float"></div>                <label>                    <form action="file.php" ref="upload" method="post">                    <input className="upload" type="file" ref="file" onChange={this.change}  />                        <span>Выберите файл</span>                    </form>                </label>            </div>			</div>            <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>            <br />            <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;            <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>            </div>            </div>            </div>                </div>            <div className="probel"> </div>            </div>        );    }});// Block "Subtitle"var BlockUtitle = React.createClass({    getInitialState: function () {        return {            position: summa,        };    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {		var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "There was api" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');		/*$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Subtitle');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	*/		    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    getOut: function() {      var quoteText = $(ReactDOM.findDOMNode(this.refs.utitlearea)).val();	  var thisBlockId = $('#grid-block' + this.props.count).attr('class');	  var thisUrl = "There was api" + thisBlockId  + "/delete_element/";	  var formData = {'text': quoteText};	  var newForm = JSON.stringify(formData);	  /*$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update data subtitle');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}				});	*/      },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div>            <div className="block-utitle">                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" className="action" ref="action" onChange={this.basket} />  </div>                    <div className="up-title"> Подзаголовок</div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                </div>                <div className="none-float"></div>                <textarea className="utitlearea" ref="utitlearea" onBlur={this.getOut}>                </textarea>        <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>        <br />        <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;        <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>        </div>        </div>        </div>            </div>        <div className="probel"> </div>        </div>        );    }});// Imagevar BlockImg = React.createClass({    getInitialState: function() {        return {            position: summa        };    },    componentDidMount:function() {        $(ReactDOM.findDOMNode(this.refs.upload)).attr('enctype','multipart/form-data');		$(ReactDOM.findDOMNode(this.refs.file)).attr('name','filer');    },    change:function(e) {      var inputImgVal = e.target.value;	  var inputImgValNew = inputImgVal.substr(12);	  var inputFile = ReactDOM.findDOMNode(this.refs.file);      var file = new FormData();	  file.append( 'img', $(inputFile)[0].files[0]);	  var refFile = ReactDOM.findDOMNode(this.refs.upmain);	  var refImage = ReactDOM.findDOMNode(this.refs.blockimage);	  var thisBlockId = $('#grid-block' + this.props.count).attr('class');	  var thisUrl = "There was api" + thisBlockId  + "/delete_element/";	  var thisUrl2 = "There was api" + thisBlockId  + "/delete_element/";	  var formData = {'alt': 'image', 'copyright_id':1};	  var newForm = JSON.stringify(formData);      // Post image	  /*$.ajax({            url: thisUrl2,            data: file,            processData: false,            contentType: false,            type: 'POST',            success: function (data, textStatus, jqXHR) {                $(refFile).css('display','none');				var imgValNew = data.img;				var blockImage = "<img class='img-block' src='" + imgValNew + "' />";				$(refImage).append(blockImage);            }      });*/	 // Post json 	 /*$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update data image');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}	 });	 */    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {        var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "There was api" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');		/*$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Image');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	*/    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {        if (($("input:checkbox:checked").length) == 0) {            $('#basket').css('visibility', 'hidden');            $('#check').css('visibility', 'hidden');            }        else {            ('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (        <div>        <div className="block-image" ref="blockimage">            <div className="up-block">                <div className="delete" onClick={this.delete}> X </div>                <div className="action-wrapper"> <input type="checkbox" className="action"  ref="action" onChange={this.basket} />  </div>                <div className="up-title"> Изображение </div>                <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i></div>            </div>            <div className="file-upload" ref="upmain">                <label>                    <form action="file.php" ref="upload" method="post">                    <input className="upload" type="file" ref="file" onChange={this.change}  />                        <span>Выберите файл</span>                    </form>                </label>            </div>			<select className="imageselect" ref="videoselect"> <option> Copywrite </option> </select>	        <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>        <br />        <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;        <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>        </div>        </div>        </div>        </div>        <div className="probel"> </div>        </div>        )    }});// Marker itemvar MarkerItem = React.createClass({    getInitialState: function () {        return {            clickCounter: 1,        };    },   delete: function() {       $('#marker-grid' + this.props.count).remove();       markerSumma--;   },   next: function() {       this.setState({clickCounter: this.state.clickCounter + 1});       if (this.state.clickCounter == 1) {           $(ReactDOM.findDOMNode(this.refs.level)).css('margin-left', "30px");           $(ReactDOM.findDOMNode(this.refs.markerInput)).attr('next', "one");           var levelParent = $(ReactDOM.findDOMNode(this.refs.markerWrapper)).parent();           var levelButton = ReactDOM.findDOMNode(this.refs.level);           var levelPrevious = $(levelParent).prev();           var levelMarker = $(levelPrevious).find('.marker-item');           if ($(levelMarker).attr('next') == undefined) {               $(ReactDOM.findDOMNode(this.refs.level)).css('visibility', "hidden");               $(levelParent).wrap("<div class='level-double' />");               $(levelParent).parent().sortable({handle: '.marker-sortable'});           }           if ($(levelMarker).attr('next') == 'one') {               var levelFind = $(levelParent).parent().find('.level-double');               $(levelFind).append(levelParent);           }       }       if (this.state.clickCounter == 2) {           $(ReactDOM.findDOMNode(this.refs.level)).css('margin-left', "60px");           $(ReactDOM.findDOMNode(this.refs.level)).css('visibility','hidden');           $(ReactDOM.findDOMNode(this.refs.markerInput)).attr('next', "two");           var levelParent = $(ReactDOM.findDOMNode(this.refs.markerWrapper)).parent();           var levelButton = ReactDOM.findDOMNode(this.refs.level);           var levelPrevious = $(levelParent).prev();           var levelMarker = $(levelPrevious).find('.marker-item');           if ($(levelMarker).attr('next') == 'one') {               $(levelParent).wrap("<div class='level-third' />");               $(levelParent).parent().sortable({handle: '.marker-sortable'});           }           if ($(levelMarker).attr('next') == 'two') {               var levelFind = $(levelParent).parent().find('.level-third');               $(levelFind).append(levelParent);           }       }       if (this.state.clickCounter == 3) {           $(ReactDOM.findDOMNode(this.refs.level)).css('margin-left', "0px");           $(ReactDOM.findDOMNode(this.refs.level)).html('→');           this.setState({clickCounter: 0});       }   },   render: function() {        return (            <div ref="markerWrapper">                <div className="marker-level" ref="level" onClick={this.next}>  →  </div>                <input className="marker-item" ref="markerInput" />                <div className="marker-sortable"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                <div className="marker-delete" onClick={this.delete}> x </div>                <div className="none-float"></div>            </div>        );   }});// Markervar BlockMarker = React.createClass({    getInitialState: function () {        return {            position: summa,        };    },    componentDidMount: function() {        var marketgridMount = ReactDOM.findDOMNode(this.refs.markergrid);        $(marketgridMount).sortable({handle: '.marker-sortable'});    },    add: function() {        markerSumma ++;        var gridMarker = document.createElement('div');        gridMarker.setAttribute('id', 'marker-grid' + markerSumma);        var marketgrid = ReactDOM.findDOMNode(this.refs.markergrid);        marketgrid.appendChild(gridMarker);        ReactDOM.render(            <MarkerItem count={markerSumma} />,            document.getElementById('marker-grid' + markerSumma)        );        var gridHeight = $('#grid').height() + 70 + 'px';        $('#grid').css('height', gridHeight);        var markerLevel = $(marketgrid).find('.marker-level');        $(markerLevel[0]).css('visibility','hidden');    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {        var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    save: function() {       var marketgrid = ReactDOM.findDOMNode(this.refs.markergrid);       var values = [];        $.each($(marketgrid).find('.marker-item'),function() {            var findIndex = $(marketgrid).find('.marker-item').index(this);            var nextItem = $(marketgrid).find('.marker-item').eq(findIndex + 1);            var previousItem = $(marketgrid).find('.marker-item').eq(findIndex - 1);            if (findIndex == 0) {                values.push('<li>' + $(this).val() + '</li>');            }            if ($(this).attr('next') == undefined && $(previousItem).attr('next') !== 'two' && findIndex !== 0) {                values.push('<li>' + $(this).val() + '</li>');            }            if ($(this).attr('next') == undefined && $(previousItem).attr('next') == 'two' && findIndex !== 0){                values.push('</ul>' + '<li>' + $(this).val() + '</li>');            }            if ($(this).attr('next') == 'one') {                var findIndex = $(marketgrid).find('.marker-item').index(this);                var nextItem = $(marketgrid).find('.marker-item').eq(findIndex + 1);                var previousItem = $(marketgrid).find('.marker-item').eq(findIndex - 1);                if ($(nextItem).attr('next') == undefined && $(previousItem).attr('next') == undefined ) {                    values.push('<ul>' + '<li>' + $(this).val() + '</li>' + '</ul>');                }                else if ($(nextItem).attr('next') !== undefined && $(previousItem).attr('next') == undefined) {                    values.push( '<ul>' + '<li>' + $(this).val() + '</li>');                }                else if ($(nextItem).attr('next') == undefined && $(previousItem).attr('next') !== undefined) {                    values.push('<li>' + $(this).val() + '</li>' + '</ul>');                }                else if ($(nextItem).attr('next') == undefined && $(previousItem).attr('next') == 'two' ) {                    values.push('<li>' + $(this).val() + '</li>' + '</ul>');                }                else if ($(nextItem).attr('next') !== undefined && $(previousItem).attr('next') !== undefined ) {                    values.push('<li>' + $(this).val() + '</li>');                }                else {                    console.log('Something else');                }            }            if ($(this).attr('next') == 'two') {                var findIndex = $(marketgrid).find('.marker-item').index(this);                var nextItem = $(marketgrid).find('.marker-item').eq(findIndex + 1);                var previousItem = $(marketgrid).find('.marker-item').eq(findIndex - 1);                if ($(nextItem).attr('next') == undefined && $(previousItem).attr('next') == 'one') {                    values.push('<ul>' + '<li>' + $(this).val() + '</li>' + '</ul>');                }                else if ($(nextItem).attr('next') == 'two' && $(previousItem).attr('next') == 'one') {                    values.push('<ul>' + '<li>' + $(this).val() + '</li>');                }                else if ($(nextItem).attr('next') == 'two' && $(previousItem).attr('next') == 'two') {                    values.push('<li>' + $(this).val() + '</li>');                }                else if ($(nextItem).attr('next') !== 'two'  && $(previousItem).attr('next') == 'two') {                    values.push('<li>' + $(this).val() + '</li>' + '</ul>');                }                else {                    console.log('Something two');                }            }        });        var newValues = values.join('');        var trueValues = '<ul>' + newValues + '</ul>';        console.log(trueValues);    },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div>            <div className="block-marker">                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" className="action" ref="action" onChange={this.basket} />  </div>                    <div className="up-title"> Список</div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                </div>                <div className="none-float"></div>                <div className="markerarea">                    <button className="btn btn-info" onClick={this.add}> Добавить </button>                    <button className="btn btn-info" onClick={this.save}> Сохранить </button>                    <div className="markergrid" ref="markergrid">  </div>                </div>            <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>        <br />        <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;        <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>        </div>        </div>        </div>            </div>            <div className="probel"> </div>            </div>        );    }});// Quotevar BlockQuate = React.createClass({    getInitialState: function () {        return {            position: summa,        };    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {        var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "http://refadmin.360tv.ru/articles/modedit/crud/article_1/elem_" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');			$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Quote');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    getOut: function() {      var quoteText = $(ReactDOM.findDOMNode(this.refs.quotearea)).val();	  var thisBlockId = $('#grid-block' + this.props.count).attr('class');	  var thisUrl = "There was api" + thisBlockId  + "/update_data/";	  var formData = {'text': quoteText};	  var newForm = JSON.stringify(formData);	  /*$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update data quote');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	*/	      },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div>            <div className="block-quote">                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" className="action" ref="action" onChange={this.basket} />  </div>                    <div className="up-title"> Цитата</div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                </div>                <div className="none-float"></div>                <textarea className="quotearea" ref="quotearea" onBlur={this.getOut}>                </textarea>        <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>        <br />        <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;        <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>        </div>        </div>        </div>            </div>        <div className="probel"> </div>        </div>        );    }});// Videovar BlockVideo = React.createClass({    getInitialState: function () {        return {            position: summa,        };    },    delete: function() {        $('#basket-mask').css('display','block');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','block');    },    deleteblock: function() {        var thisGridHeight = $('#grid').height() - $('#grid-block' + this.props.count).height();		var thisBlockId = $('#grid-block' + this.props.count).attr('class');		var thisUrl = "http://refadmin.360tv.ru/articles/modedit/crud/article_1/elem_" + thisBlockId  + "/delete_element/";        $('#grid-block' + this.props.count).remove();        $('#grid').css('height', thisGridHeight + "px");        summa--;        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');			$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Video');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	    },    cancel: function() {        $('#basket-mask').css('display','none');        $(ReactDOM.findDOMNode(this.refs.blockdelete)).css('display','none');    },    getOut: function() {        var video = $(ReactDOM.findDOMNode(this.refs.videoarea)).val();		var videoTitle = $(ReactDOM.findDOMNode(this.refs.videotitle)).val();		var videoSelect = $(ReactDOM.findDOMNode(this.refs.videoselect)).val();	    var thisUrl = "There was api" + thisBlockId  + "/update_data/";		var formData = {'link': video, 'copyright_id': 1};		var newForm = JSON.stringify(formData);		/*$.ajax({		url : thisUrl,		type: "POST",		contentType: 'application/json',		data : newForm,		success: function(data, textStatus, jqXHR)		{			console.log('Update data video');		},		error: function (jqXHR, textStatus, errorThrown)		{			console.log(errorThrown);		}		});*/					    },    basket: function() {        var action = $(ReactDOM.findDOMNode(this.refs.action));        if($(action).prop('checked')) {            $('#basket').css('visibility', 'visible');            $('#check').css('visibility', 'visible');        }        else {            if (($("input:checkbox:checked").length) == 0) {                $('#basket').css('visibility', 'hidden');                $('#check').css('visibility', 'hidden');            }            else {                $('#basket').css('visibility', 'visible');                $('#check').css('visibility', 'visible');            }        }    },    render: function() {        return (            <div onBlur={this.getOut}>            <div className="block-video">                <div className="up-block">                    <div className="delete" onClick={this.delete}> X </div>                    <div className="action-wrapper"> <input type="checkbox" className="action" ref="action" onChange={this.basket}  />  </div>                    <div className="up-title"> Видео</div>                    <div className="drag-drop"> <i className="fa fa-arrows" aria-hidden="true"></i> </div>                </div>                <div className="none-float"></div>                <div ref="videowrapper" className="video-wrapper">                    <input className="videoarea" ref="videotitle"  placeholder="Название" /> <br />					<textarea className="videotxt" ref="videoarea" placeholder="Iframe"></textarea> <br />					<select className="videoselect" ref="videoselect"> <option> Copywrite </option> </select>					                </div>        <div className="block-delete" ref="blockdelete">            <div className="panel-heading"> Подтвердите удаление </div>        <div className="panel-body">            <div className="block-buttons">            <p> Вы можете удалить выбранный блок, либо оставить его на странице </p>        <br />        <button ref="confirm" className="btn btn-danger"  onClick={this.deleteblock}> Подтвердить </button> &nbsp; &nbsp;        <button ref="cancel" className="btn btn-info"  onClick={this.cancel}> Отменить </button>        </div>        </div>        </div>            </div>        <div className="probel"> </div>        </div>        );    }});// Первоначальное выстраивание элементов$.ajax({	url : "There was api",	type: "GET",	contentType: 'application/json',	success: function(data, textStatus, jqXHR)		{			console.log("Response to api is ready!");			var elementsData = data.data.elements;			if (elementsData == 'no_data') {							}			else {			for (var i=0; i < elementsData.length; i++) {				var elementsObject = elementsData[i];				var elementPosition = elementsObject.el_position;				var elementType = elementsObject.el_type;				var elementData = elementsObject.el_data;				if (elementData !== 'no_data') {					var elementText = elementData.text;					var elementImage = "<img src='there was api" + elementData.image + "' class='img-block' />";				}				var elementId = elementsObject.el_id;				if (elementType == 'paragraph') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<Block count={summa} />,                    document.getElementById('grid-block' + elementPosition)					);					var editor = $('#grid-block' + elementPosition).find('div').find('.block-text').find('.jqte').find('.jqte_editor');					$(editor).html(elementText);				}				if (elementType == 'image') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<BlockImg count={summa}/>,                    document.getElementById('grid-block' + elementPosition)					);								}				if (elementType == 'paragraph_image') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<BlockPimage count={summa} />,                    document.getElementById('grid-block' + elementPosition)					);					var editor = $('#grid-block' + elementPosition).find('div').find('.block-pimage').find('.jqte').find('.jqte_editor');					$(editor).html(elementText);												}				if (elementType == 'subtitle') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<BlockUtitle count={summa} />,                    document.getElementById('grid-block' + elementPosition)					);						var editor = $('#grid-block' + elementPosition).find('div').find('.block-utitle').find('.utitlearea');					$(editor).val(elementText);				}				if (elementType == 'quote') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<BlockQuate count={summa} />,                    document.getElementById('grid-block' + elementPosition)					);					var editor = $('#grid-block' + elementPosition).find('div').find('.block-quote').find('.quotearea');					$(editor).val(elementText);							}				if (elementType == 'video') {					summa++;					var gridBlock = "<div id='grid-block" + elementPosition + "' class='" + elementId + "'> </div>";					$('#grid').append(gridBlock);					ReactDOM.render(<BlockVideo count={summa} />,                    document.getElementById('grid-block' + elementPosition)					);				}			}			}			},	error: function (jqXHR, textStatus, errorThrown)		{			console.log(errorThrown);		}});		// Create paragraphvar Paragraph = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-paragraph" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Параграф</div>                <div> <i className="fa fa-file-text-o fa-2x" aria-hidden="true"></i> </div>			</div>	        );    }});// Create imagevar Image = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-image" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Изображение</div>                <div> <i className="fa fa-file-image-o fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Create image + paragraph var Pimage = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-pimage" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Параграф + изображение</div>                <div> <i className="fa fa-object-group fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Create subtitlevar UnderTitle = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-utitle" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Подзаголовок</div>                <div> <i className="fa fa-header fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Create markervar Marker = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-marker" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Список</div>                <div> <i className="fa fa-list-ul fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Create quotevar Quate = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-quote" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Цитата</div>                <div><i className="fa fa-quote-right fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Create videovar Video = React.createClass({	getHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','block');	},	outHint: function() {		var hint = $(ReactDOM.findDOMNode(this.refs.hint));		$(hint).css('display','none');	},    render: function() {        return (            <div className="edit-video" onMouseEnter={this.getHint} onMouseLeave={this.outHint}>				<div className="hint" ref="hint">Видео</div>                <div><i className="fa fa-youtube-play fa-2x" aria-hidden="true"></i></div>            </div>        );    }});// Basketvar Basket = React.createClass({    calling: function() {        $('#basket-delete').css('display', 'block');        $('#basket-mask').css('display', 'block');    },    checking: function() {			$(".action").attr("checked","checked");    },    delete: function() {        var checked = $("input:checkbox:checked");        var checkedLength = $("input:checkbox:checked").length;        for (var i=0;i < checked.length; i++) {            var checkedParent = $(checked[i]).parent().parent().parent().parent().parent();            var checkedString = $(checkedParent).attr('id').slice(-1);            var thisGridHeight = $('#grid').height() - $('#grid-block' + checkedString).height();            $('#grid').css('height', thisGridHeight + "px");            var checkedId = $(checkedParent).attr('class');			var thisUrl = "http://refadmin.360tv.ru/articles/modedit/crud/article_1/elem_" + checkedId  + "/delete_element/";			$(checkedParent).remove();									$.ajax({			url : thisUrl,			type: "POST",				success: function(data, textStatus, jqXHR)				{					console.log('Delete Block');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}		});	        }        summa = summa - checkedLength;        $('#basket-delete').css('display', 'none');        $('#basket-mask').css('display', 'none');        $('#basket').css('visibility','hidden');        $('#check').css('visibility','hidden');    },    cancel: function() {        $('#basket-delete').css('display', 'none');        $('#basket-mask').css('display', 'none');    },    render: function() {        return (            <div>                <div id="basket" onClick={this.calling}>                    <i className="fa fa-trash fa-3x" aria-hidden="true"></i>                </div>            <div id="check" onClick={this.checking}>                <i className="fa fa-check fa-3x" aria-hidden="true"></i>            </div>            <div id="basket-delete">            <div className="panel-heading"> Подтвердите удаление </div>            <div className="panel-body">            <div className="basket-buttons">                <p> Вы можете удалить выбранные блоки, либо оставить их на странице </p>                <br />                <button ref="confirm" className="btn btn-danger" id="basket-confirm" onClick={this.delete}> Подтвердить </button>                <button ref="cancel" className="btn btn-info" id="basket-cancel" onClick={this.cancel}> Отменить </button>            </div>            </div>            </div>            </div>        );    }});// Count of blocksvar Kolvo = React.createClass({    getInitialState: function() {        return {            kolvo: 0        };    },    componentDidMount: function() {        this.timerId = setInterval(            ()=> this.tick(),            1        );    },    componentWillUnmount:function() {        clearInterval(this.timerId);    },    tick: function() {        this.setState({            kolvo: summa        });    },    render: function() {        return (            <div className="kolvo"></div>        );    }});// Panel of elementsvar Panel = React.createClass({    componentDidMount: function () {        var windowWidth = $(window).width();        if (windowWidth < 501) {            $('.panel').css('float','none');            $('.panel-right').css({'position':'relative','margin-left':'30px'});        }        else {            var thisMargin = $('.panel').width() + 50 + 'px';            $('.panel-right').css('margin-left',thisMargin);        }        $(window).resize(function() {            var windowResizeWidth = $(window).width();            var resizeMargin = $('.panel').width() + 50 + 'px';            $('.panel-right').css('margin-left',resizeMargin);            if (windowResizeWidth < 501) {                $('.panel').css('float','none');                $('.panel-right').css({'position':'relative','margin-left':'30px'});            }            else {                $('.panel').css('float','left');            }        });		// Drag and drop        $('#grid').sortable({            placeholder: 'new-place',            handle: '.drag-drop',            update: function (event, ui) {				console.log('Drag drop');                var item = $(ui.item).attr('class');                var itemNewPosition = $(ui.item).index() + 1;				var thisUrl = "There was api" + thisBlockId  + "/update_data/";				var formData = {'el_position': itemNewPosition};				var newForm = JSON.stringify(formData);								/*$.ajax({				url : thisUrl,				type: "POST",				contentType: 'application/json',				data : newForm,				success: function(data, textStatus, jqXHR)				{					console.log('Update Block');				},				error: function (jqXHR, textStatus, errorThrown)				{					console.log(errorThrown);				}				});	*/			            }        });		// Create blocks        $('.edit-paragraph').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-paragraph ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<Block count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																	var newGridChildren = $('#grid').children();								if (newGridChildren.length > 2) {								for (var k=0; k < newGridChildren.length; k++) {								var gridNumber = k + 1;								var numberTrue = 'grid-block' + gridNumber;								$(newGridChildren[k]).attr('id', numberTrue);														}								}																	blockPosition = $(gridBlock).index() + 1;								var formData = {'el_type':'paragraph','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Paragraph');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});*/																}											}					});													var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}},		stop: function() {				var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}												},revert:true});				// 	Image        $('.edit-image').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-image ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<BlockImg count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;									if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																		blockPosition = $(gridBlock).index() + 1;								console.log(blockPosition);								var formData = {'el_type':'image','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Image');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});	*/														}											}					});										var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;						$(newGridChildren[k]).attr('id', numberTrue);											}					}					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}		},		stop: function() {		var gridChildrenLength = $('#grid').children().length;					if (gridChildrenLength > 1) {						var gridChildren = $('.grid-center');							for (var i = 0; i < gridChildren.length; i++) {								$(gridChildren[i]).remove();								var gridHeightNew = $('#grid').height() - 200;								$('#grid').css('height', gridHeightNew + 'px');								var arr = $('#grid').children();								for (var j=0; j < arr.length; j++) {													if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}							}					}												},revert:true});		// Paragraph + image			$('.edit-pimage').draggable({ start: function() {					var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-pimage ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<BlockPimage count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;									if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																		var newGridChildren = $('#grid').children();								if (newGridChildren.length > 2) {								for (var k=0; k < newGridChildren.length; k++) {									var gridNumber = k + 1;									var numberTrue = 'grid-block' + gridNumber;									$(newGridChildren[k]).attr('id', numberTrue);														}								}								blockPosition = $(gridBlock).index() + 1;								console.log(blockPosition);									var formData = {'el_type':'paragraph_image','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Paragraph-image');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});	*/														}											}					});					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}		},				stop: function() {				var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}												},revert:true});		// Subtitle		$('.edit-utitle').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-utitle ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<BlockUtitle count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;									if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																		var newGridChildren = $('#grid').children();								if (newGridChildren.length > 2) {								for (var k=0; k < newGridChildren.length; k++) {									var gridNumber = k + 1;									var numberTrue = 'grid-block' + gridNumber;									$(newGridChildren[k]).attr('id', numberTrue);														}								}								blockPosition = $(gridBlock).index() + 1;								console.log(blockPosition);								var formData = {'el_type':'subtitle','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Subtitle');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});	*/														}											}					});					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}		},				stop: function() {				var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}												},revert:true});								// Marker	        $('.edit-marker').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).css('margin-bottom','200px');					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight; 					$('#grid').css('height', gridHeightNew + 'px');				}		}		},			stop: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).css('margin-bottom','0px');				}		    }			},revert:true});					// Quote        $('.edit-quote').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-quote ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<BlockQuate count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;									if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																		var newGridChildren = $('#grid').children();								if (newGridChildren.length > 2) {								for (var k=0; k < newGridChildren.length; k++) {									var gridNumber = k + 1;									var numberTrue = 'grid-block' + gridNumber;									$(newGridChildren[k]).attr('id', numberTrue);														}								}								blockPosition = $(gridBlock).index() + 1;								console.log(blockPosition);								var formData = {'el_type':'quote','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Quote');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});	*/						}											}					});					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}		},				stop: function() {				var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}												},revert:true});		// Video				        $('.edit-video').draggable({ start: function() {			var gridChildrenLength = $('#grid').children().length;			if (gridChildrenLength > 1) {				var gridChildren = $('#grid').children();				dragAndDropCenter = 1;				summa++;				summa = summa - 1;				for (var i = 0; i < gridChildren.length; i++) {					$(gridChildren[i]).after($('<div class="grid-center"> </div>'));					$('.grid-center').droppable({ drop: function(event, ui) {						var thisUi = ui.draggable;						var thisClass = $(thisUi[0]).attr('class');						if (thisClass == 'edit-video ui-draggable ui-draggable-handle ui-draggable-dragging') {							$(thisUi[0]).css('visibility', 'hidden');							setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);							var gridBlock = document.createElement('div');							gridBlock.setAttribute('id', 'grid-block' + summa);							$(this).prepend(gridBlock);							$(this).removeAttr('class');							$('.grid-center').css({'background':'none', 'border':'none'});							ReactDOM.render(							<BlockVideo count={summa} />,														document.getElementById('grid-block' + summa)							);							$(gridBlock).unwrap();							var thisHeight = $('#grid-block' + summa).height();							var gridHeight = $('#grid').height();							var summaHeight = thisHeight + gridHeight + "px";							$('#grid').css('height',summaHeight);															var gridChildrenLength = $('#grid').children().length;									if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}																		var newGridChildren = $('#grid').children();								if (newGridChildren.length > 2) {								for (var k=0; k < newGridChildren.length; k++) {									var gridNumber = k + 1;									var numberTrue = 'grid-block' + gridNumber;									$(newGridChildren[k]).attr('id', numberTrue);														}								}								blockPosition = $(gridBlock).index() + 1;								console.log(blockPosition);									var formData = {'el_type':'video','el_position':blockPosition};								var newForm = JSON.stringify(formData);								/*$.ajax({									url : "There was api",									type: "POST",									contentType: 'application/json',									data : newForm,									success: function(data, textStatus, jqXHR)									{									console.log('Create Video');									var blockId = data.el_id;									$(gridBlock).attr('class', blockId);									},									error: function (jqXHR, textStatus, errorThrown)									{										console.log(errorThrown);									}								});	*/														}											}					});					var gridBlockHeight = $(gridChildren[i]).height();					var gridHeight = $('#grid').height();					var gridHeightNew = gridHeight + gridBlockHeight;										$('#grid').css('height', gridHeightNew + 'px');				}		}		},				stop: function() {				var gridChildrenLength = $('#grid').children().length;								if (gridChildrenLength > 1) {								var gridChildren = $('.grid-center');								for (var i = 0; i < gridChildren.length; i++) {									$(gridChildren[i]).remove();									var gridHeightNew = $('#grid').height() - 200;									$('#grid').css('height', gridHeightNew + 'px');									var arr = $('#grid').children();									for (var j=0; j < arr.length; j++) {														if ($(arr[j]).height() == 0) {										$(arr[j]).remove();									}															}								}								}												},revert:true});					// Receiving elements	        $('#grid').droppable({            drop: function(event, ui) {                var thisUi = ui.draggable;                var thisClass = $(thisUi[0]).attr('class');                if (thisClass == 'edit-paragraph ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {						ReactDOM.render(						<Block count={summa} />,                        document.getElementById('grid-block' + summa)						);										var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);					var formData = {'el_type':'paragraph','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																										var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/								}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";					$('#grid').css('height',summaHeight);													                }                if (thisClass == 'edit-image ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {                    ReactDOM.render(                    <BlockImg count={summa} />,                        document.getElementById('grid-block' + summa)					);										var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);					var formData = {'el_type':'image','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																										var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/								}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }				if (thisClass == 'edit-pimage ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {                    ReactDOM.render(                    <BlockPimage count={summa} />,                        document.getElementById('grid-block' + summa)					);						var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);					var formData = {'el_type':'paragraph_image','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																										var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/						}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }				if (thisClass == 'edit-utitle ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {                    ReactDOM.render(                    <BlockUtitle count={summa} />,                        document.getElementById('grid-block' + summa)					);					var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);					var formData = {'el_type':'subtitle','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																									var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/											}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }                if (thisClass == 'edit-marker ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);                    ReactDOM.render(                    <BlockMarker count={summa} />,                        document.getElementById('grid-block' + summa)					);                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }                if (thisClass == 'edit-quote ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {                    ReactDOM.render(                    <BlockQuate count={summa} />,                        document.getElementById('grid-block' + summa)					);					var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);					var formData = {'el_type':'quote','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																									var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/											}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }                if (thisClass == 'edit-video ui-draggable ui-draggable-handle ui-draggable-dragging') {                    summa++;					$(thisUi[0]).css('visibility', 'hidden');					setTimeout(function() {$(thisUi[0]).css('visibility', 'visible')}, 400);                    var gridBlock = document.createElement('div');                    gridBlock.setAttribute('id', 'grid-block' + summa);                    document.getElementById('grid').appendChild(gridBlock);					if (dragAndDropCenter == 0) {                    ReactDOM.render(                    <BlockVideo count={summa} />,                        document.getElementById('grid-block' + summa)                    );					var newGridChildren = $('#grid').children();					if (newGridChildren.length > 2) {					for (var k=0; k < newGridChildren.length; k++) {						var gridNumber = k + 1;						var numberTrue = 'grid-block' + gridNumber;							$(newGridChildren[k]).attr('id', numberTrue);												}					}					blockPosition = $(gridBlock).index() + 1;					console.log(blockPosition);						var formData = {'el_type':'video','el_position':blockPosition};					var newForm = JSON.stringify(formData);					/*$.ajax({						url : "There was api",						type: "POST",						contentType: 'application/json',						data : newForm,						success: function(data, textStatus, jqXHR)							{																										var blockId = data.el_id;							$(gridBlock).attr('class', blockId);										 								},							error: function (jqXHR, textStatus, errorThrown)							{							console.log(errorThrown);							}					});*/						}                    var thisHeight = $('#grid-block' + summa).height();                    var gridHeight = $('#grid').height();                    var summaHeight = thisHeight + gridHeight + "px";                    $('#grid').css('height',summaHeight);                }            },            activate: function() {                $('#grid').css({                    backgroundColor: "#3DA1C8"                });            },            deactivate: function() {                $('#grid').css({                    backgroundColor: "#323B44"                });            }        });    },    render: function () {        return (            <div >            <Mask />            <div className = "panel panel-default" >            <div className = "panel-heading" > Модульный редактор </ div >            <div className = "panel-body" >               <Basket />            <div className = "none-float" > < / div >            <div id = "grid" >            </div >            < Kolvo / >            </div >            </div >            <div className = "panel-right" >            <div className = "panel-heading" > Добавить </div >            <div id = "right-icons-wrapper" >            <Paragraph / >            <Image / >			<Pimage />			<Marker />			<UnderTitle />             <Quate / >            <Video / >            <div className = "none-float" > < / div >            </div>            </div>            </div>        )        ;    }});ReactDOM.render(<Panel />,    document.getElementById('container'));